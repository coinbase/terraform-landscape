# Defines grammar for parsing `terraform plan` output.

grammar TerraformPlan
  rule plan
    [\s]* list:resource_list "\n"* {
      def to_ast
        list.to_ast
      end
    }
  end

  rule resource_list
    item:resource "\n\n" list:resource_list {
      def to_ast
        [item.to_ast] + list.to_ast
      end
    }
    /
    item:resource "\n" {
      def to_ast
        [item.to_ast]
      end
    }
  end

  rule resource
    header:resource_header "\n" attrs:attribute_list {
      def to_ast
        header.to_ast.merge(attributes: attrs.to_ast)
      end
    }
    /
    header:resource_header {
      def to_ast
        header.to_ast.merge(attributes: {})
      end
    }
  end

  rule resource_header
    _? change:('~' / '-/+' / '-' / '+' / '<=') _ type:[a-zA-Z0-9_-]+ '.' name:[\S]+ _ '(' reason1:[^)]+ ')' _ '(' reason2:[^)]+ ')' {
      def to_ast
        {
          change: change.text_value.to_sym,
          resource_type: type.text_value,
          resource_name: name.text_value,
          reason1: reason1.text_value,
          reason2: reason2.text_value,
        }
      end
    }
    /
    _? change:('~' / '-/+' / '-' / '+' / '<=') _ type:[a-zA-Z0-9_-]+ '.' name:[\S]+ _ '(' reason:[^)]+ ')' {
      def to_ast
        {
          change: change.text_value.to_sym,
          resource_type: type.text_value,
          resource_name: name.text_value,
          reason: reason.text_value,
        }
      end
    }
    /
    _? change:('~' / '-/+' / '-' / '+' / '<=') _ type:[a-zA-Z0-9_-]+ '.' name:[\S]+ {
      def to_ast
        {
          change: change.text_value.to_sym,
          resource_type: type.text_value,
          resource_name: name.text_value,
        }
      end
    }
  end

  rule attribute_list
    _ item:attribute "\n" attrs:attribute_list {
      def to_ast
        item.to_ast.merge(attrs.to_ast)
      end
    }
    /
    _ item:attribute {
      def to_ast
        item.to_ast
      end
    }
  end

  rule attribute
    attribute_name:(!': ' .)* ':' _? attribute_value:[^\n]+ {
      def to_ast
        { attribute_name.text_value => sanitize_value_and_reason }
      end

      def sanitize_value_and_reason
        val = attribute_value.text_value

        # We'll perform some sanitization of the values within the parser.

        # Handle case where attribute has an annotation (e.g. "forces new resource")
        if (match = val.match(/\s+\((?<reason>[^)]+)\)$/))
          reason = match['reason']
          val = val[0...match.begin(0)]
        end

        # With Terraform >= 0.10.4, the <computed> field is now without quotes,
        # which will cause problem with how downstream we process the output.
        # Convert it to have quotes and handle < 0.10.4 as well.
        val = val.gsub(%r{=> <computed>$}, '=> "<computed>"')
                 .gsub(%r{^<computed>}, '"<computed>"')

        { value: val, reason: reason }
      end
    }
  end

  rule _
    [ ]+
  end
end
